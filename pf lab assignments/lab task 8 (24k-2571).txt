QUESTION 1:

#include <stdio.h>
int main(){
	int size;
	printf("Enter the size of square matrix: ");
	scanf("%d",&size);
	int square[size][size];
	for (int i=1;i<=3;i++){
		for (int j=1;j<=3;j++){
			printf("Enter the value for %d row and %d element: ",i,j);
			scanf("%d",&square[i-1][j-1]);
		}
	}
	for (int z=0;z<3;z++){
		for (int  a=0;a<3;a++){
			printf("%d|",square[z][a]);
		} printf("\n");
	}
}



QUESTION 2:


#include <stdio.h>
int main() {
    int a, b;
    printf("Enter the range to print the prime numbers inclusive: \n");
    scanf("%d %d", &a, &b);
    int max = a > b ? a : b;
    int min = a < b ? a : b;
	printf("prime numbers between %d and %d: ",min,max);

    for (int i = min; i <= max; i++) {
        if (i < 2) continue; // Skip numbers less than 2, as they are not prime

        int flag = 1; 
        for (int div = 2; div * div <= i; div++) {
            if (i % div == 0) {
                flag = 0; 
                break;
            }
        }

        if (flag) {
			printf("%d ",i); 
        }
    }

    return 0;
}



QUESTION 3:


#include <stdio.h>
int main(){
	int num;
	while(1){
		printf("Enter an odd number to print the pattern in decreasing order: ");
		scanf("%d",&num);
		printf("\n\n");
		if (num % 2 == 0){
			continue; //take input until odd number
		} else {
			break;
		}
	} 
	for (int i=num;i>=1;i-= 2){
		for (int j=i;j>=1;j-= 2){
			printf("%d ",j);
			}
			printf("\n");
		} 
}



QUESTION 4:



#include <stdio.h>
int main(){
	int row,col;
	printf("Enter the order of matrix i.e row and column: ");
	scanf("%d %d",&row,&col);
	int arr[row][col];
	int Tarr[col][row];
	for (int i=1;i<=row;i++){
		for (int j=1;j<=col;j++){
			printf("Enter the value for %d row and %d column: ",i,j);
			scanf("%d",&arr[i-1][j-1]);
		}
	} 
	for (int i=0;i<row;i++){
		for (int j=0;j<col;j++){
			printf("%d ",arr[i][j]);
		} printf("\n");
	} printf("\n");
	// swapping rows and colums of arr into Tarr
	for (int i=0;i<row;i++){
		for(int j=0;j<col;j++){
			Tarr[j][i] = arr[i][j];
		}
	}
	for (int a=0;a<col;a++){
		for (int b=0;b<row;b++){
			printf("%d ",Tarr[a][b]);
		} printf("\n");
	}
} //end main



QUESTION 5:



#include <stdio.h>
int main() {
    int arr[3][3] = {
        {5, 7, 1},
        {10, 11, 9},
        {8, 15, 3}
    };
    int Spoint, Fsaddle = 0;
    
    printf("Saddle point(s):\n");

    for (int i = 0; i < 3; i++) {
        int minR = arr[i][0];
        int colindex = 0;
        // Finding the smallest element in the current row
        for (int j = 1; j < 3; j++) {
            if (arr[i][j] < minR) {
                minR = arr[i][j];
                colindex = j;
            }
        }
        // Check if the smallest element is the largest in its column
        Spoint = 1;
        for (int k = 0; k < 3; k++) {
            if (arr[k][colindex] > minR) {
                Spoint = 0;
                break;
            }
        }
        if (Spoint) {
            printf("Saddle point at position (%d, %d): %d\n", i, colindex, minR);
            Fsaddle = 1;
        }
    }
	if (!Fsaddle) {
        printf("No saddle point found in the matrix.\n");
    }

    return 0;
}



QUESTION 6:



#include <stdio.h>
int main() {
    int row,col;
    printf("Enter order of matrix: row and column number. \n");
    scanf("%d %d",&row,&col);
    int arr[row][col];
    for (int i=0;i<row;i++){
    	for (int j=0;j<col;j++){
    		printf("Enter the value for %d row and %d column: ",i+1,j+1);
    		scanf("%d",&arr[i][j]);
		}
	}
	int max = arr[0][0],Rindex=0,Cindex=0;
	for (int k=0;k<row;k++){
		for(int z=0;z<col;z++){
			if (arr[k][z]>max){
				max = arr[k][z];
				Rindex = k; Cindex = z;
			}
		}
	}
	printf("The max value of array is %d and it occurs at index (%d,%d).\n",max,Rindex,Cindex);
}



QUESTION 7:


#include <stdio.h>
void multiply(int arr1[3][3], int arr2[3][3], int result[3][3]){
	for (int i=0; i<3; i++){
        for (int j=0; j<3; j++){
            result[i][j] = 0;
        }
    }
	for (int i=0; i<3; i++){
        for (int j=0; j<3; j++){
            for (int k=0; k<3; k++){
                result[i][j] += arr1[i][k] * arr2[k][j];
            }
        }
    }
}

int main() {
    int arr1[3][3] = {{5,3,5},{2,6,1},{1,2,3}};
	int arr2[3][3] = {{3,2,1},{6,5,4},{9,8,7}};
    int result[3][3];
    multiply(arr1,arr2,result);
	printf("Result matrix:\n");
    for (int i=0; i<3; i++){
        for (int j=0; j<3; j++){
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }

    return 0;
}



QUESTION 8:


#include <stdio.h>
void diamond(int row){
	//upper diamond printing
	for (int i=1;i<=row;i++){ 	
		int k=1;
		for (int j=1;j<=(2*row-1);j++){
			if (j>=row+1-i && j<=row-1+i && k){
					printf("*");
					k = 0;
				} else {
					printf(" ");
					k = 1;
				}
		}printf("\n");
	}
	//printing lower diamond
	for (int i=row-1;i>=1; i--) {
		int k=1;
		for (int j=2*row-1;j>=1;j--){
			if (j>=row+1-i && j<=row-1+i && k){
				printf("*");
				k=0;
			} else{
				printf(" ");
				k=1;
			}
		} printf("\n");
}
}

int main(){
	int row;
	printf("Enter the number of rows of the diamond: \n");
	scanf("%d",&row);
	diamond(row);
}









